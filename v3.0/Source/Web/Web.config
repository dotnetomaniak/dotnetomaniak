<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="loggingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.LoggingSettings, Microsoft.Practices.EnterpriseLibrary.Logging" requirePermission="false" />
    <section name="exceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Configuration.ExceptionHandlingSettings, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" requirePermission="false" />
    <section name="cachingConfiguration" type="Microsoft.Practices.EnterpriseLibrary.Caching.Configuration.CacheManagerSettings, Microsoft.Practices.EnterpriseLibrary.Caching" requirePermission="false" />
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" requirePermission="false" />
    <section name="assetSettings" type="Kigg.Web.AssetSettingsSection, Kigg.Web" requirePermission="false" />
    <!--<section name="uri" type="System.Configuration.UriSection, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->
    <section name="dotNetOpenAuth" type="DotNetOpenAuth.Configuration.DotNetOpenAuthSection" requirePermission="false" allowLocation="true" />
  </configSections>
  <appSettings>
    <clear />
    <add key="dependencyResolverTypeName" value="Kigg.Infrastructure.EnterpriseLibrary.UnityDependencyResolver, Kigg.Infrastructure.EnterpriseLibrary" />
    <add key="ClientValidationEnabled" value="false" />
    <add key="UnobtrusiveJavaScriptEnabled" value="false" />
    <add key="MiniProfilerEnabled" value="false" />
    <add key="recaptcha-secret-key" value="__captcha_secret_key__" />
    <add key="recaptcha-public-key" value="__captcha_public_key__" />
    <add key="mailServer" value="__mailServer__" />
    <add key="mailPort" value="587" />
    <add key="mailUser" value="__mailUser__" />
    <add key="mailPass" value="__mailPass__" />
    <add key="browshotApiKey" value="__browshot_api_key__" />
  </appSettings>
  <connectionStrings>
    <clear />
    <add name="dotnetomaniak" connectionString="Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=dotnetomaniak;Integrated Security=SSPI;" providerName="System.Data.SqlClient" />
  </connectionStrings>
  <!-- The uri section is necessary to turn on .NET 3.5 support for IDN (international domain names),
       which is necessary for OpenID urls with unicode characters in the domain/host name. 
       It is also required to put the Uri class into RFC 3986 escaping mode, which OpenID and OAuth require. -->
  <!--<uri>
    <idn enabled="All"/>
    <iriParsing enabled="true"/>
  </uri>-->
  <loggingConfiguration name="KiGG Logging" tracingEnabled="true" defaultCategory="All">
    <listeners>
      <add name="TextFileExceptionListener" fileName="Logs\exception.txt" header="----------------------------------------" footer="----------------------------------------" rollInterval="Hour" rollFileExistsBehavior="Increment" timeStampPattern="yyyy-MM-dd-hh" formatter="TextFormatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging" />
      <add name="CsvFileListener" fileName="Logs\trace.csv" rollInterval="Hour" rollFileExistsBehavior="Increment" timeStampPattern="yyyy-MM-dd-hh" formatter="CsvFormatter" listenerDataType="Microsoft.Practices.EnterpriseLibrary.Logging.Configuration.RollingFlatFileTraceListenerData, Microsoft.Practices.EnterpriseLibrary.Logging" type="Microsoft.Practices.EnterpriseLibrary.Logging.TraceListeners.RollingFlatFileTraceListener, Microsoft.Practices.EnterpriseLibrary.Logging" />
    </listeners>
    <formatters>
      <add name="TextFormatter" type="Microsoft.Practices.EnterpriseLibrary.Logging.Formatters.TextFormatter, Microsoft.Practices.EnterpriseLibrary.Logging" template="Timestamp: {timestamp} Message: {message} Category: {category} Priority: {priority} EventId: {eventid} Severity: {severity} Title:{title} Machine: {machine} Application Domain: {appDomain} Process Id: {processId} Process Name: {processName} Win32 Thread Id: {win32ThreadId} Thread Name: {threadName} Extended Properties: {dictionary({key} - {value} )}" />
      <add name="CsvFormatter" type="Kigg.Infrastructure.EnterpriseLibrary.WeblogTraceTextFormatter, Kigg.Infrastructure.EnterpriseLibrary" template="&quot;{machine}&quot;,&quot;{timestamp}&quot;,&quot;{severity}&quot;,&quot;{namaspace}&quot;,&quot;{className}&quot;,&quot;{methodSignature}&quot;,&quot;{message}&quot;,&quot;{user}&quot;,&quot;{ipAddress}&quot;,&quot;{userAgent}&quot;,&quot;{url}&quot;,&quot;{referrer}&quot;" />
    </formatters>
    <categorySources>
      <add switchValue="All" name="All">
        <listeners>
          <!--<add name="CsvFileListener" />-->
        </listeners>
      </add>
      <add switchValue="All" name="FullException">
        <listeners>
          <!--<add name="EmailExceptionListener" />-->
          <add name="TextFileExceptionListener" />
        </listeners>
      </add>
    </categorySources>
    <specialSources>
      <allEvents switchValue="All" name="All Events" />
      <notProcessed switchValue="All" name="Unprocessed Category" />
      <errors switchValue="All" name="Logging Errors &amp; Warnings">
        <listeners>
          <add name="TextFileExceptionListener" />
        </listeners>
      </errors>
    </specialSources>
  </loggingConfiguration>
  <exceptionHandling>
    <exceptionPolicies>
      <add name="Unhandled Exceptions">
        <exceptionTypes>
          <add name="FullException" type="System.Exception, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" postHandlingAction="None">
            <exceptionHandlers>
              <add name="DefaultExceptionHandler" logCategory="FullException" eventId="0" priority="1" severity="Critical" useDefaultLogger="true" title="KiGG Exception" formatterType="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.TextExceptionFormatter, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling" type="Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging.LoggingExceptionHandler, Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.Logging" />
              <add name="WeblogExceptionHandler" logCategory="FullException" type="Kigg.Infrastructure.EnterpriseLibrary.WeblogLoggingExceptionHandler, Kigg.Infrastructure.EnterpriseLibrary" />
            </exceptionHandlers>
          </add>
        </exceptionTypes>
      </add>
    </exceptionPolicies>
  </exceptionHandling>
  <cachingConfiguration defaultCacheManager="DefaultCacheManager">
    <cacheManagers>
      <add name="DefaultCacheManager" expirationPollFrequencyInSeconds="900" maximumElementsInCacheBeforeScavenging="1000" numberToRemoveWhenScavenging="10" backingStoreName="InMemory" type="Microsoft.Practices.EnterpriseLibrary.Caching.CacheManager, Microsoft.Practices.EnterpriseLibrary.Caching" />
    </cacheManagers>
    <backingStores>
      <add name="InMemory" encryptionProviderName="" type="Microsoft.Practices.EnterpriseLibrary.Caching.BackingStoreImplementations.NullBackingStore, Microsoft.Practices.EnterpriseLibrary.Caching" />
    </backingStores>
  </cachingConfiguration>
  <unity>
    <typeAliases>
      <typeAlias alias="Singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="Transient" type="Microsoft.Practices.Unity.TransientLifetimeManager, Microsoft.Practices.Unity" />
      <typeAlias alias="PerWebRequest" type="Kigg.Infrastructure.EnterpriseLibrary.UnityPerWebRequestLifetimeManager, Kigg.Infrastructure.EnterpriseLibrary" />
      <typeAlias alias="IConfigurationSettings" type="Kigg.IConfigurationSettings, Kigg.Core" />
      <typeAlias alias="ConfigurationSettings" type="Kigg.ConfigurationSettings, Kigg.Core" />
      <typeAlias alias="ILogger" type="Kigg.Infrastructure.EnterpriseLibrary.ILogger, Kigg.Infrastructure.EnterpriseLibrary" />
      <typeAlias alias="Logger" type="Kigg.Infrastructure.EnterpriseLibrary.LoggerWrapper, Kigg.Infrastructure.EnterpriseLibrary" />
      <typeAlias alias="IExceptionPolicy" type="Kigg.Infrastructure.EnterpriseLibrary.IExceptionPolicy, Kigg.Infrastructure.EnterpriseLibrary" />
      <typeAlias alias="ExceptionPolicyWrapper" type="Kigg.Infrastructure.EnterpriseLibrary.ExceptionPolicyWrapper, Kigg.Infrastructure.EnterpriseLibrary" />
      <typeAlias alias="ILog" type="Kigg.Infrastructure.ILog, Kigg.Core" />
      <typeAlias alias="Log" type="Kigg.Infrastructure.EnterpriseLibrary.Weblog, Kigg.Infrastructure.EnterpriseLibrary" />
      <typeAlias alias="ICache" type="Kigg.Infrastructure.ICache, Kigg.Core" />
      <typeAlias alias="Cache" type="Kigg.Infrastructure.EnterpriseLibrary.Cache, Kigg.Infrastructure.EnterpriseLibrary" />
      <typeAlias alias="IFile" type="Kigg.Infrastructure.IFile, Kigg.Core" />
      <typeAlias alias="File" type="Kigg.Infrastructure.FileWrapper, Kigg.Core" />
      <typeAlias alias="IConfigurationManager" type="Kigg.Infrastructure.IConfigurationManager, Kigg.Core" />
      <typeAlias alias="ConfigurationManager" type="Kigg.Infrastructure.ConfigurationManagerWrapper, Kigg.Core" />
      <typeAlias alias="IEmailSender" type="Kigg.Infrastructure.IEmailSender, Kigg.Core" />
      <typeAlias alias="EmailSender" type="Kigg.Infrastructure.EmailSender, Kigg.Core" />
      <typeAlias alias="IHttpForm" type="Kigg.Infrastructure.IHttpForm, Kigg.Core" />
      <typeAlias alias="HttpForm" type="Kigg.Infrastructure.HttpForm, Kigg.Core" />
      <typeAlias alias="CachingHttpForm" type="Kigg.Infrastructure.CachingHttpForm, Kigg.Core" />
      <typeAlias alias="IHtmlToStoryContentConverter" type="Kigg.Infrastructure.IHtmlToStoryContentConverter, Kigg.Core" />
      <typeAlias alias="HtmlToStoryContentConverter" type="Kigg.Infrastructure.HtmlAgilityPack.HtmlToStoryContentConverter, Kigg.Infrastructure.HtmlAgilityPack" />
      <typeAlias alias="IHtmlSanitizer" type="Kigg.Infrastructure.IHtmlSanitizer, Kigg.Core" />
      <typeAlias alias="HtmlSanitizer" type="Kigg.Infrastructure.HtmlAgilityPack.HtmlSanitizer, Kigg.Infrastructure.HtmlAgilityPack" />
      <typeAlias alias="IContentService" type="Kigg.Infrastructure.IContentService, Kigg.Core" />
      <typeAlias alias="ContentService" type="Kigg.Infrastructure.ContentService, Kigg.Core" />
      <typeAlias alias="LoggingContentService" type="Kigg.Infrastructure.LoggingContentService, Kigg.Core" />
      <typeAlias alias="CachingContentService" type="Kigg.Infrastructure.CachingContentService, Kigg.Core" />
      <typeAlias alias="IThumbnail" type="Kigg.Infrastructure.IThumbnail, Kigg.Core" />
      <typeAlias alias="BrowshotThumbnail" type="Kigg.Infrastructure.BrowshotThumbnail, Kigg.Core, Version=3.0.0.0, Culture=neutral" />
      <typeAlias alias="WebSnaprThumbnail" type="Kigg.Infrastructure.WebSnaprThumbnail, Kigg.Core" />
      <typeAlias alias="ThumbalizrThumbnail" type="Kigg.Infrastructure.ThumbalizrThumbnail, Kigg.Core" />
      <typeAlias alias="PageGlimpseThumbnail" type="Kigg.Infrastructure.PageGlimpseThumbnail, Kigg.Core" />
      <typeAlias alias="ISpamWeightCalculator" type="Kigg.Infrastructure.ISpamWeightCalculator, Kigg.Core" />
      <typeAlias alias="SpamWeightCalculators" type="Kigg.Infrastructure.ISpamWeightCalculator[], Kigg.Core" />
      <typeAlias alias="BadWordMatchSpamWeightCalculator" type="Kigg.Infrastructure.BadWordMatchSpamWeightCalculator, Kigg.Core" />
      <typeAlias alias="HyperlinkCountSpamWeightCalculator" type="Kigg.Infrastructure.HyperlinkCountSpamWeightCalculator, Kigg.Core" />
      <typeAlias alias="CategoryMatchSpamWeightCalculator" type="Kigg.Infrastructure.CategoryMatchSpamWeightCalculator, Kigg.Core" />
      <typeAlias alias="TagMatchSpamWeightCalculator" type="Kigg.Infrastructure.TagMatchSpamWeightCalculator, Kigg.Core" />
      <typeAlias alias="ISpamProtection" type="Kigg.Infrastructure.ISpamProtection, Kigg.Core" />
      <typeAlias alias="DefaultSpamProtection" type="Kigg.Infrastructure.DefaultSpamProtection, Kigg.Core" />
      <typeAlias alias="GenericExternalSpamProtection" type="Kigg.Infrastructure.GenericExternalSpamProtection, Kigg.Core" />
      <typeAlias alias="DefensioSpamProtection" type="Kigg.Infrastructure.DefensioSpamProtection, Kigg.Core" />
      <typeAlias alias="ISpamPostprocessor" type="Kigg.Service.ISpamPostprocessor, Kigg.Core" />
      <typeAlias alias="SpamPostprocessor" type="Kigg.Service.SpamPostprocessor, Kigg.Core" />
      <typeAlias alias="IDomainObjectFactory" type="Kigg.DomainObjects.IDomainObjectFactory, Kigg.Core" />
      <typeAlias alias="DomainObjectFactory" type="Kigg.LinqToSql.DomainObjects.DomainObjectFactory, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IConnectionString" type="Kigg.LinqToSql.Repository.IConnectionString, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="ConnectionString" type="Kigg.LinqToSql.Repository.ConnectionString, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IDatabaseFactory" type="Kigg.LinqToSql.Repository.IDatabaseFactory, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="DatabaseFactory" type="Kigg.LinqToSql.Repository.DatabaseFactory, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IUnitOfWork" type="Kigg.Infrastructure.IUnitOfWork, Kigg.Core" />
      <typeAlias alias="UnitOfWork" type="Kigg.LinqToSql.Repository.UnitOfWork, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IUserRepository" type="Kigg.Repository.IUserRepository, Kigg.Core" />
      <typeAlias alias="UserRepository" type="Kigg.LinqToSql.Repository.UserRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="CachingUserRepository" type="Kigg.Repository.CachingUserRepository, Kigg.Core" />
      <typeAlias alias="LoggingUserRepository" type="Kigg.Repository.LoggingUserRepository, Kigg.Core" />
      <typeAlias alias="ICategoryRepository" type="Kigg.Repository.ICategoryRepository, Kigg.Core" />
      <typeAlias alias="CategoryRepository" type="Kigg.LinqToSql.Repository.CategoryRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="CachingCategoryRepository" type="Kigg.Repository.CachingCategoryRepository, Kigg.Core" />
      <typeAlias alias="LoggingCategoryRepository" type="Kigg.Repository.LoggingCategoryRepository, Kigg.Core" />
      <typeAlias alias="ITagRepository" type="Kigg.Repository.ITagRepository, Kigg.Core" />
      <typeAlias alias="TagRepository" type="Kigg.LinqToSql.Repository.TagRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="CachingTagRepository" type="Kigg.Repository.CachingTagRepository, Kigg.Core" />
      <typeAlias alias="LoggingTagRepository" type="Kigg.Repository.LoggingTagRepository, Kigg.Core" />
      <typeAlias alias="IStoryRepository" type="Kigg.Repository.IStoryRepository, Kigg.Core" />
      <typeAlias alias="StoryRepository" type="Kigg.LinqToSql.Repository.StoryRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="CachingStoryRepository" type="Kigg.Repository.CachingStoryRepository, Kigg.Core" />
      <typeAlias alias="LoggingStoryRepository" type="Kigg.Repository.LoggingStoryRepository, Kigg.Core" />
      <typeAlias alias="IKnownSourceRepository" type="Kigg.Repository.IKnownSourceRepository, Kigg.Core" />
      <typeAlias alias="KnownSourceRepository" type="Kigg.LinqToSql.Repository.KnownSourceRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="ICommentRepository" type="Kigg.Repository.ICommentRepository, Kigg.Core" />
      <typeAlias alias="CommentRepository" type="Kigg.LinqToSql.Repository.CommentRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="ICommentSubscribtionRepository" type="Kigg.Repository.ICommentSubscribtionRepository, Kigg.Core" />
      <typeAlias alias="CommentSubscribtionRepository" type="Kigg.LinqToSql.Repository.CommentSubscribtionRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IMarkAsSpamRepository" type="Kigg.Repository.IMarkAsSpamRepository, Kigg.Core" />
      <typeAlias alias="MarkAsSpamRepository" type="Kigg.LinqToSql.Repository.MarkAsSpamRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IStoryViewRepository" type="Kigg.Repository.IStoryViewRepository, Kigg.Core" />
      <typeAlias alias="StoryViewRepository" type="Kigg.LinqToSql.Repository.StoryViewRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IVoteRepository" type="Kigg.Repository.IVoteRepository, Kigg.Core" />
      <typeAlias alias="VoteRepository" type="Kigg.LinqToSql.Repository.VoteRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IUserScoreTable" type="Kigg.Service.IUserScoreTable, Kigg.Core" />
      <typeAlias alias="UserScoreTable" type="Kigg.Service.UserScoreTable, Kigg.Core" />
      <typeAlias alias="IEventAggregator" type="Kigg.Infrastructure.IEventAggregator, Kigg.Core" />
      <typeAlias alias="EventAggregator" type="Kigg.Infrastructure.EventAggregator, Kigg.Core" />
      <typeAlias alias="IStoryWeightCalculator" type="Kigg.Service.IStoryWeightCalculator, Kigg.Core" />
      <typeAlias alias="StoryWeightCalculators" type="Kigg.Service.IStoryWeightCalculator[], Kigg.Core" />
      <typeAlias alias="VoteWeightCalculator" type="Kigg.Service.VoteWeight, Kigg.Core" />
      <typeAlias alias="CommentWeightCalculator" type="Kigg.Service.CommentWeight, Kigg.Core" />
      <typeAlias alias="ViewWeightCalculationStrategy" type="Kigg.Service.ViewWeight, Kigg.Core" />
      <typeAlias alias="UserScoreWeightCalculator" type="Kigg.Service.UserScoreWeight, Kigg.Core" />
      <typeAlias alias="FreshnessWeightCalculator" type="Kigg.Service.FreshnessWeight, Kigg.Core" />
      <typeAlias alias="KnownSourceWeightCalculator" type="Kigg.Service.KnownSourceWeight, Kigg.Core" />
      <typeAlias alias="IStoryService" type="Kigg.Service.IStoryService, Kigg.Core" />
      <typeAlias alias="StoryService" type="Kigg.Service.StoryService, Kigg.Core" />
      <typeAlias alias="IBlockedIPCollection" type="Kigg.Web.IBlockedIPCollection, Kigg.Web" />
      <typeAlias alias="BlockedIPCollection" type="Kigg.Web.BlockedIPCollection, Kigg.Web" />
      <typeAlias alias="IFormsAuthentication" type="Kigg.Web.IFormsAuthentication, Kigg.Web" />
      <typeAlias alias="FormsAuthentication" type="Kigg.Web.FormsAuthenticationWrapper, Kigg.Web" />
      <typeAlias alias="IOpenIdRelyingParty" type="Kigg.Web.IOpenIdRelyingParty, Kigg.Web" />
      <typeAlias alias="OpenIdRelyingParty" type="Kigg.Web.OpenIdRelyingPartyWrapper, Kigg.Web" />
      <typeAlias alias="reCAPTCHAValidator" type="Kigg.Web.reCAPTCHAValidator, Kigg.Web" />
      <typeAlias alias="ISocialServiceRedirector" type="Kigg.Web.ISocialServiceRedirector, Kigg.Web" />
      <typeAlias alias="SocialServiceRedirectors" type="Kigg.Web.ISocialServiceRedirector[], Kigg.Web" />
      <typeAlias alias="MsdnRedirector" type="Kigg.Web.MsdnRedirector, Kigg.Web" />
      <typeAlias alias="WykopRedirector" type="Kigg.Web.WykopRedirector, Kigg.Web" />
      <typeAlias alias="DeliciousRedirector" type="Kigg.Web.DeliciousRedirector, Kigg.Web" />
      <typeAlias alias="FaceBookRedirector" type="Kigg.Web.FaceBookRedirector, Kigg.Web" />
      <typeAlias alias="TwitterRedirector" type="Kigg.Web.TwitterRedirector, Kigg.Web" />
      <typeAlias alias="DefaultColors" type="Kigg.Web.DefaultColors, Kigg.Web" />
      <typeAlias alias="MembershipController" type="Kigg.Web.MembershipController, Kigg.Web" />
      <typeAlias alias="RecommendationController" type="Kigg.Web.RecommendationController, Kigg.Web" />
      <typeAlias alias="CommingEventController" type="Kigg.Web.CommingEventController, Kigg.Web" />
      <typeAlias alias="StoryController" type="Kigg.Web.StoryController, Kigg.Web" />
      <typeAlias alias="FacebookController" type="Kigg.Web.Controllers.FacebookController, Kigg.Web" />
      <typeAlias alias="CommentController" type="Kigg.Web.CommentController, Kigg.Web" />
      <typeAlias alias="SupportController" type="Kigg.Web.SupportController, Kigg.Web" />
      <typeAlias alias="CategoryController" type="Kigg.Web.CategoryController, Kigg.Web" />
      <typeAlias alias="BadgesController" type="Kigg.Web.BadgesController, Kigg.Web" />
      <typeAlias alias="TagController" type="Kigg.Web.TagController, Kigg.Web" />
      <typeAlias alias="FeedController" type="Kigg.Web.FeedController, Kigg.Web" />
      <typeAlias alias="AssetHandler" type="Kigg.Web.AssetHandler, Kigg.Web" />
      <typeAlias alias="ImageHandler" type="Kigg.Web.ImageHandler, Kigg.Web" />
      <typeAlias alias="UserHandler" type="Kigg.Web.UserHandler, Kigg.Web" />
      <typeAlias alias="OpenSearchHandler" type="Kigg.Web.OpenSearchHandler, Kigg.Web" />
      <typeAlias alias="XrdsHandler" type="Kigg.Web.XrdsHandler, Kigg.Web" />
      <typeAlias alias="SiteMapHandler" type="Kigg.Web.SiteMapHandler, Kigg.Web" />
      <typeAlias alias="ShareHandler" type="Kigg.Web.ShareHandler, Kigg.Web" />
      <typeAlias alias="IBackgroundTask" type="Kigg.Infrastructure.IBackgroundTask, Kigg.Core" />
      <typeAlias alias="UserScoreService" type="Kigg.Service.UserScoreService, Kigg.Core" />
      <typeAlias alias="PingServer" type="Kigg.Infrastructure.PingServer, Kigg.Core" />
      <typeAlias alias="SlackIntegration" type="Kigg.Infrastructure.SlackIntegration, Kigg.Core" />
      <typeAlias alias="PingStory" type="Kigg.Infrastructure.PingStory, Kigg.Core" />
      <typeAlias alias="SendMail" type="Kigg.Infrastructure.SendMail, Kigg.Core" />
      <typeAlias alias="SendTwitterMessage" type="Kigg.Infrastructure.SendTwitterMessage, Kigg.Core" />
      <typeAlias alias="BackgroundTasks" type="Kigg.Infrastructure.IBackgroundTask[], Kigg.Core" />
      <typeAlias alias="IBootstrapperTask" type="Kigg.Infrastructure.IBootstrapperTask, Kigg.Core" />
      <typeAlias alias="Roles" type="Kigg.DomainObjects.Roles, Kigg.Core" />
      <typeAlias alias="DefaultUser" type="Kigg.Infrastructure.DefaultUser, Kigg.Core" />
      <typeAlias alias="DefaultUsers" type="Kigg.Infrastructure.DefaultUser[], Kigg.Core" />
      <typeAlias alias="CreateDefaultUsers" type="Kigg.Infrastructure.CreateDefaultUsers, Kigg.Core" />
      <typeAlias alias="StartBackgroundTasks" type="Kigg.Infrastructure.StartBackgroundTasks, Kigg.Core" />
      <typeAlias alias="RegisterRoutes" type="Kigg.Web.RegisterRoutes, Kigg.Web" />
      <typeAlias alias="IControllerFactory" type="System.Web.Mvc.IControllerFactory, System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
      <typeAlias alias="ControllerFactory" type="Kigg.Web.ControllerFactory, Kigg.Web" />
      <typeAlias alias="RegisterControllerFactory" type="Kigg.Web.RegisterControllerFactory, Kigg.Web" />
      <typeAlias alias="IStoryDataService" type="Kigg.DataServices.ServiceContracts.IStoryDataService, Kigg.DataServices" />
      <typeAlias alias="StoryDataService" type="Kigg.DataServices.ServiceImpl.StoryDataService, Kigg.DataServices" />
      <typeAlias alias="EndRecommendationNotificationJob" type="Kigg.Web.Jobs.EndRecommendationNotificationJob, Kigg.Web" />
      <!-- Badges -->
      <typeAlias alias="EarlyBirdBadge" type="Kigg.Web.Jobs.EarlyBirdBadge, Kigg.Web" />
      <typeAlias alias="NightOwlBadge" type="Kigg.Web.Jobs.NightOwlBadge, Kigg.Web" />
      <typeAlias alias="1kPointsBadge" type="Kigg.Web.Jobs._1kPointsBadge, Kigg.Web" />
      <typeAlias alias="10kPointsBadge" type="Kigg.Web.Jobs._10kPointsBadge, Kigg.Web" />
      <typeAlias alias="StoryAdderBadge" type="Kigg.Web.Jobs.StoryAdderBadge, Kigg.Web" />
      <typeAlias alias="CommenterBadge" type="Kigg.Web.Jobs.CommenterBadge, Kigg.Web" />
      <typeAlias alias="UpVoterBadge" type="Kigg.Web.Jobs.UpVoterBadge, Kigg.Web" />
      <typeAlias alias="GoodStoryBadge" type="Kigg.Web.Jobs.GoodStoryBadge, Kigg.Web" />
      <typeAlias alias="GreatStoryBadge" type="Kigg.Web.Jobs.GreatStoryBadge, Kigg.Web" />
      <typeAlias alias="PopularStoryBadge" type="Kigg.Web.Jobs.PopularStoryBadge, Kigg.Web" />
      <typeAlias alias="MultiAdderBadge" type="Kigg.Web.Jobs.MultiAdderBadge, Kigg.Web" />
      <typeAlias alias="GlobetrotterBadge" type="Kigg.Web.Jobs.GlobetrotterBadge, Kigg.Web" />
      <typeAlias alias="DotnetomaniakBadge" type="Kigg.Web.Jobs.DotnetomaniakBadge, Kigg.Web" />
      <typeAlias alias="FacebookBadge" type="Kigg.Web.Jobs.FacebookBadge, Kigg.Web" />
      <typeAlias alias="IAchievementRepository" type="Kigg.Repository.IAchievementRepository, Kigg.Core" />
      <typeAlias alias="AchievementRepository" type="Kigg.LinqToSql.Repository.AchievementRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IRecommendationRepository" type="Kigg.Repository.IRecommendationRepository, Kigg.Core" />
      <typeAlias alias="RecommendationRepository" type="Kigg.LinqToSql.Repository.RecommendationRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="ICommingEventRepository" type="Kigg.Repository.ICommingEventRepository, Kigg.Core" />
      <typeAlias alias="CommingEventRepository" type="Kigg.LinqToSql.Repository.CommingEventRepository, Kigg.Infrastructure.LinqToSql" />
      <typeAlias alias="IEncoder" type="Kigg.Core.Infrastructure.Thumbnail.IEncoder, Kigg.Core" />
      <typeAlias alias="Encoder" type="Kigg.Web.Helpers.Encoder, Kigg.Web" />
    </typeAliases>
    <containers>
      <container>
        <types>
          <type type="IConfigurationSettings" mapTo="ConfigurationSettings">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="RootUrl" propertyType="System.String">
                <value type="System.String" value="https://dotnetomaniak.pl" />
              </property>
              <property name="WebmasterEmail" propertyType="System.String">
                <value type="System.String" value="admin@dotnetomaniak.pl" />
              </property>
              <property name="SupportEmail" propertyType="System.String">
                <value type="System.String" value="support@dotnetomaniak.pl" />
              </property>
              <property name="DefaultEmailOfOpenIdUser" propertyType="System.String">
                <value type="System.String" value="openiduser@dotnetomaniak.pl" />
              </property>
              <property name="SiteTitle" propertyType="System.String">
                <value type="System.String" value="dotnetomaniak.pl" />
              </property>
              <property name="MetaKeywords" propertyType="System.String">
                <value type="System.String" value=".net, c#, f#, programowanie, vb.net, .net framework, silverlight, WCF, WPF, SQL, MVC, javascript, TFS, debuggowanie" />
              </property>
              <property name="MetaDescription" propertyType="System.String">
                <value type="System.String" value="Portal fanów technologii .NET. Promuj dobre artykuły - razem stwórzmy społeczność .NET w Polsce." />
              </property>
              <property name="TopTags" propertyType="System.Int32">
                <value type="System.Int32" value="50" />
              </property>
              <property name="HtmlStoryPerPage" propertyType="System.Int32">
                <value type="System.Int32" value="20" />
              </property>
              <property name="FeedStoryPerPage" propertyType="System.Int32">
                <value type="System.Int32" value="25" />
              </property>
              <property name="CarouselStoryCount" propertyType="System.Int32">
                <value type="System.Int32" value="5" />
              </property>
              <property name="HtmlUserPerPage" propertyType="System.Int32">
                <value type="System.Int32" value="20" />
              </property>
              <property name="TopUsers" propertyType="System.Int32">
                <value type="System.Int32" value="20" />
              </property>
              <property name="AutoDiscoverContent" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
              <property name="SendPing" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
              <property name="PromoteText" propertyType="System.String">
                <value type="System.String" value="Podbij ↑" />
              </property>
              <property name="PromoteTextForCounter" propertyType="System.String">
                <value type="System.String" value="podbij!" />
              </property>
              <property name="DemoteText" propertyType="System.String">
                <value type="System.String" value="Odbij ↓" />
              </property>
              <property name="CountText" propertyType="System.String">
                <value type="System.String" value="shouts" />
              </property>
              <!-- 4 Hours-->
              <property name="MinimumAgeOfStoryInHoursToPublish" propertyType="System.Single">
                <value type="System.Single" value="4" />
              </property>
              <!-- 10 Days-->
              <property name="MaximumAgeOfStoryInHoursToPublish" propertyType="System.Single">
                <value type="System.Single" value="240" />
              </property>
              <property name="AllowPossibleSpamStorySubmit" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
              <property name="SendMailWhenPossibleSpamStorySubmitted" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
              <property name="AllowPossibleSpamCommentSubmit" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
              <property name="SendMailWhenPossibleSpamCommentSubmitted" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
              <property name="PublishedStoriesFeedBurnerUrl" propertyType="System.String">
                <value type="System.String" value="https://feeds2.feedburner.com/Dotnetomaniakpl-OstatnioOpublikowaneArtykuy" />
              </property>
              <property name="UpcomingStoriesFeedBurnerUrl" propertyType="System.String">
                <value type="System.String" value="https://feeds.feedburner.com/Dotnetomaniakpl-NadchodzceArtykuy" />
              </property>
              <property name="MaximumUserScoreToShowCaptcha" propertyType="System.Decimal">
                <value type="System.Decimal" value="25,0" />
              </property>
              <property name="StorySumittedThresholdOfUserToSpamCheck" propertyType="System.Int32">
                <value type="System.Int32" value="5" />
              </property>
              <property name="PublishedStoriesFeedBurnerUrl" propertyType="System.String">
                <value type="System.String" value="https://feeds2.feedburner.com/Dotnetomaniakpl-OstatnioOpublikowaneArtykuy" />
              </property>
              <property name="FacebookAppId" propertyType="System.String">
                <value type="System.String" value="689933027721704" />
              </property>
              <property name="DefaultsNrOfEventsToDisplay" propertyType="System.Int32">
                <value type="System.Int32" value="3" />
              </property>
            </typeConfig>
          </type>
          <type type="ILogger" mapTo="Logger">
            <lifetime type="Singleton" />
          </type>
          <type type="IExceptionPolicy" mapTo="ExceptionPolicyWrapper">
            <lifetime type="Singleton" />
          </type>
          <type type="ILog" mapTo="Log">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="traceCategory" parameterType="System.String">
                  <value type="System.String" value="All" />
                </param>
                <param name="logger" parameterType="ILogger">
                  <dependency />
                </param>
                <param name="exceptionPolicyName" parameterType="System.String">
                  <value type="System.String" value="Unhandled Exceptions" />
                </param>
                <param name="exceptionPolicy" parameterType="IExceptionPolicy">
                  <dependency />
                </param>
                <param name="frameToSkip" parameterType="System.Int32">
                  <value type="System.Int32" value="4" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ICache" mapTo="Cache">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="cacheManagerName" parameterType="System.String">
                  <value type="System.String" value="DefaultCacheManager" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IFile" mapTo="File">
            <lifetime type="Singleton" />
          </type>
          <type type="IConfigurationManager" mapTo="ConfigurationManager">
            <lifetime type="Singleton" />
          </type>
          <type type="IEmailSender" mapTo="EmailSender">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="templateDirectory" parameterType="System.String">
                  <value type="System.String" value="mailTemplates" />
                </param>
                <param name="enableSsl" parameterType="System.Boolean">
                  <value type="System.Boolean" value="false" />
                </param>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="file" parameterType="IFile">
                  <dependency />
                </param>
                <param name="configurationManager" parameterType="IConfigurationManager">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Base" type="IHttpForm" mapTo="HttpForm">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="userAgent" parameterType="System.String">
                  <value type="System.String" value="Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.116 Safari/537.36" />
                </param>
                <!--15 Seconds-->
                <param name="timeout" parameterType="System.Int32">
                  <value type="System.Int32" value="15000" />
                </param>
                <param name="requestCompressed" parameterType="System.Boolean">
                  <value type="System.Boolean" value="True" />
                </param>
                <param name="maximumRedirects" parameterType="System.Int32">
                  <value type="System.Int32" value="8" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IHttpForm" mapTo="CachingHttpForm">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerHttpForm" parameterType="IHttpForm">
                  <dependency name="Base" />
                </param>
                <param name="cacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 3 days -->
                  <value type="System.Single" value="4320" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IEncoder" mapTo="Encoder">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="url" parameterType="System.String">
                  <value type="System.String" value="Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9) Gecko/2008052906 Firefox/3.0" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IHtmlSanitizer" mapTo="HtmlSanitizer">
            <lifetime type="Singleton" />
          </type>
          <type type="IHtmlToStoryContentConverter" mapTo="HtmlToStoryContentConverter">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="sanitizer" parameterType="IHtmlSanitizer">
                  <dependency />
                </param>
                <param name="fileName" parameterType="System.String">
                  <value type="System.String" value="App_Data/contentNodes.txt" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Base" type="IContentService" mapTo="ContentService">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="converter" parameterType="IHtmlToStoryContentConverter">
                  <dependency />
                </param>
                <param name="fileReader" parameterType="IFile">
                  <dependency />
                </param>
                <param name="blockedUrlPrefixFilePath" parameterType="System.String">
                  <value type="System.String" value="App_Data/blockedUrlPrefixList.txt" />
                </param>
                <!--
                                <param name="shortUrlProviderFormat" parameterType="System.String">
                                    <value type="System.String" value="http://tinyurl.com/api-create.php?url={0}"/>
                                </param>
                                -->
                <param name="shortUrlProviderFormat" parameterType="System.String">
                  <value type="System.String" value="http://is.gd/api.php?longurl={0}" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Logging" type="IContentService" mapTo="LoggingContentService">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerService" parameterType="IContentService">
                  <dependency name="Base" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IContentService" mapTo="CachingContentService">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerService" parameterType="IContentService">
                  <dependency name="Logging" />
                </param>
                <param name="contentCacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 3 days -->
                  <value type="System.Single" value="4320" />
                </param>
                <param name="shortUrlCacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 3 days -->
                  <value type="System.Single" value="4320" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IThumbnail" mapTo="BrowshotThumbnail">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <!--param name="key" parameterType="System.String">
                  <value type="System.String" value="__browshot_api_key__" />
                </param-->
                <param name="configuration" parameterType="IConfigurationManager">
                  <dependency />
                </param>
                <param name="baseUrl" parameterType="System.String">
                  <value type="System.String" value="https://api.browshot.com/api/v1/simple" />
                </param>
                <param name="instanceId" parameterType="System.Int32">
                  <value type="System.Int32" value="27" />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="encoder" parameterType="IEncoder">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="badWords" type="ISpamWeightCalculator" mapTo="BadWordMatchSpamWeightCalculator">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="file" parameterType="IFile">
                  <dependency />
                </param>
                <param name="fileName" parameterType="System.String">
                  <value type="System.String" value="App_Data/badWords.xml" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="hyperlinkCount" type="ISpamWeightCalculator" mapTo="HyperlinkCountSpamWeightCalculator">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="matchValue" parameterType="System.Int32">
                  <value type="System.Int32" value="1" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="categoryMatch" type="ISpamWeightCalculator" mapTo="CategoryMatchSpamWeightCalculator">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="matchValue" parameterType="System.Int32">
                  <value type="System.Int32" value="-10" />
                </param>
                <param name="categoryRepository" parameterType="ICategoryRepository">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="tagMatch" type="ISpamWeightCalculator" mapTo="TagMatchSpamWeightCalculator">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="matchValue" parameterType="System.Int32">
                  <value type="System.Int32" value="-10" />
                </param>
                <param name="topTags" parameterType="System.Int32">
                  <value type="System.Int32" value="50" />
                </param>
                <param name="tagRepository" parameterType="ITagRepository">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ISpamProtection" mapTo="DefaultSpamProtection">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="storyThreshold" parameterType="System.Int32">
                  <value type="System.Int32" value="3" />
                </param>
                <param name="storyLocalCalculators" parameterType="SpamWeightCalculators">
                  <array>
                    <dependency name="badWords" />
                    <dependency name="hyperlinkCount" />
                    <dependency name="categoryMatch" />
                    <dependency name="tagMatch" />
                  </array>
                </param>
                <param name="storyRemoteCalculators" parameterType="SpamWeightCalculators">
                  <array>
                    <dependency name="badWords" />
                    <dependency name="categoryMatch" />
                    <dependency name="tagMatch" />
                  </array>
                </param>
                <param name="commentThreshold" parameterType="System.Int32">
                  <value type="System.Int32" value="3" />
                </param>
                <param name="commentCalculators" parameterType="SpamWeightCalculators">
                  <array>
                    <dependency name="badWords" />
                    <dependency name="hyperlinkCount" />
                  </array>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IDomainObjectFactory" mapTo="DomainObjectFactory">
            <lifetime type="Singleton" />
          </type>
          <type type="IConnectionString" mapTo="ConnectionString">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="configuration" parameterType="IConfigurationManager">
                  <dependency />
                </param>
                <param name="name" parameterType="System.String">
                  <value type="System.String" value="dotnetomaniak" />
                  <!--Database Connection String Name -->
                </param>
                <!--<param name="edmFilesPath" parameterType="System.String">
                  <value type="System.String" value="|DataDirectory|"/>
                  -->
                <!-- Path where EDM files located, default point to App_DATA -->
                <!--
                </param>
                <param name="ssdlFileName" parameterType="System.String">
                  <value type="System.String" value="DomainObjects.SqlServer"/>
                  -->
                <!-- SSDL File Name Without Extension -->
                <!--
                </param>-->
              </constructor>
            </typeConfig>
          </type>
          <type type="IDatabaseFactory" mapTo="DatabaseFactory">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="connectionString" parameterType="ConnectionString">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Async" type="IDatabaseFactory" mapTo="DatabaseFactory">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="connectionString" parameterType="ConnectionString">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IUnitOfWork" mapTo="UnitOfWork">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Async" type="IUnitOfWork" mapTo="UnitOfWork">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency name="Async" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IRecommendationRepository" mapTo="RecommendationRepository">
            <lifetime type="Transient" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ICommingEventRepository" mapTo="CommingEventRepository">
            <lifetime type="Transient" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="LinqToSql" type="IUserRepository" mapTo="UserRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Logging" type="IUserRepository" mapTo="LoggingUserRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="IUserRepository">
                  <dependency name="LinqToSql" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IUserRepository" mapTo="CachingUserRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="IUserRepository">
                  <dependency name="Logging" />
                </param>
                <param name="noOfUsersCacheCount" parameterType="System.Int32">
                  <!---Cache the first 20 user-->
                  <value type="System.Int32" value="20" />
                </param>
                <param name="usersCacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 5 minutes-->
                  <value type="System.Single" value="5" />
                </param>
                <param name="userCacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 5 minutes-->
                  <value type="System.Single" value="5" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="LinqToSql" type="ICategoryRepository" mapTo="CategoryRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Logging" type="ICategoryRepository" mapTo="LoggingCategoryRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="ICategoryRepository">
                  <dependency name="LinqToSql" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ICategoryRepository" mapTo="CachingCategoryRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="ICategoryRepository">
                  <dependency name="Logging" />
                </param>
                <param name="cacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 7 Days -->
                  <value type="System.Single" value="10080" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="LinqToSql" type="ITagRepository" mapTo="TagRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Logging" type="ITagRepository" mapTo="LoggingTagRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="ITagRepository">
                  <dependency name="LinqToSql" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ITagRepository" mapTo="CachingTagRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="ITagRepository">
                  <dependency name="Logging" />
                </param>
                <param name="cacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 1 Hour -->
                  <value type="System.Single" value="60" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Async" type="IStoryRepository" mapTo="StoryRepository">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency name="Async" />
                </param>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="LinqToSql" type="IStoryRepository" mapTo="StoryRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="Logging" type="IStoryRepository" mapTo="LoggingStoryRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="IStoryRepository">
                  <dependency name="LinqToSql" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IStoryRepository" mapTo="CachingStoryRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="innerRepository" parameterType="IStoryRepository">
                  <dependency name="Logging" />
                </param>
                <param name="noOfPublishedStoriesCacheCount" parameterType="System.Int32">
                  <!---The total number of published story to cache -->
                  <value type="System.Int32" value="60" />
                </param>
                <param name="publishedStoriesCacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 15 Seconds -->
                  <value type="System.Single" value="0,25" />
                </param>
                <param name="noOfUpcomingStoriesCacheCount" parameterType="System.Int32">
                  <!---The total number of upcoming story to cache -->
                  <value type="System.Int32" value="40" />
                </param>
                <param name="upcomingStoriesCacheDurationInMinutes" parameterType="System.Single">
                  <!---Cache for 15 Seconds -->
                  <value type="System.Single" value="0,25" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IKnownSourceRepository" mapTo="KnownSourceRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ICommentRepository" mapTo="CommentRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ICommentSubscribtionRepository" mapTo="CommentSubscribtionRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IMarkAsSpamRepository" mapTo="MarkAsSpamRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IStoryViewRepository" mapTo="StoryViewRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
                <param name="cache" parameterType="ICache">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IVoteRepository" mapTo="VoteRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
                <param name="cache" parameterType="ICache">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IEventAggregator" mapTo="EventAggregator">
            <lifetime type="Singleton" />
          </type>
          <type name="vote" type="IStoryWeightCalculator" mapTo="VoteWeightCalculator">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="voteRepository" parameterType="IVoteRepository">
                  <dependency />
                </param>
                <param name="sameIPAddressWeight" parameterType="System.Single">
                  <value type="System.Single" value="5" />
                </param>
                <param name="differentIPAddressWeight" parameterType="System.Single">
                  <value type="System.Single" value="10" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="comment" type="IStoryWeightCalculator" mapTo="CommentWeightCalculator">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="commentRepository" parameterType="ICommentRepository">
                  <dependency />
                </param>
                <param name="ownerWeight" parameterType="System.Single">
                  <value type="System.Single" value="1" />
                </param>
                <param name="sameIPAddressWeight" parameterType="System.Single">
                  <value type="System.Single" value="2" />
                </param>
                <param name="differentIPAddressWeight" parameterType="System.Single">
                  <value type="System.Single" value="4" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="view" type="IStoryWeightCalculator" mapTo="ViewWeightCalculationStrategy">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="storyViewRepository" parameterType="IStoryViewRepository">
                  <dependency />
                </param>
                <param name="weightMultiply" parameterType="System.Single">
                  <value type="System.Single" value="0,1" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="userScore" type="IStoryWeightCalculator" mapTo="UserScoreWeightCalculator">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="voteRepository" parameterType="IVoteRepository">
                  <dependency />
                </param>
                <!-- 0.1% -->
                <param name="scorePercent" parameterType="System.Single">
                  <value type="System.Single" value="0,001" />
                </param>
                <param name="adminMultiply" parameterType="System.Single">
                  <value type="System.Single" value="4" />
                </param>
                <param name="moderatorMultiply" parameterType="System.Single">
                  <value type="System.Single" value="2" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="freshness" type="IStoryWeightCalculator" mapTo="FreshnessWeightCalculator">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="freshnessThresholdInDays" parameterType="System.Single">
                  <value type="System.Single" value="3" />
                </param>
                <param name="intervalInHours" parameterType="System.Single">
                  <value type="System.Single" value="24" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="knownSource" type="IStoryWeightCalculator" mapTo="KnownSourceWeightCalculator">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="repository" parameterType="IKnownSourceRepository">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ISpamPostprocessor" mapTo="SpamPostprocessor">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="unitOfWork" parameterType="IUnitOfWork">
                  <dependency name="Async" />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="storyRepository" parameterType="IStoryRepository">
                  <dependency name="Async" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IStoryService" mapTo="StoryService">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="factory" parameterType="IDomainObjectFactory">
                  <dependency />
                </param>
                <param name="categoryRepository" parameterType="ICategoryRepository">
                  <dependency />
                </param>
                <param name="tagRepository" parameterType="ITagRepository">
                  <dependency />
                </param>
                <param name="storyRepository" parameterType="IStoryRepository">
                  <dependency />
                </param>
                <param name="markAsSpamRepository" parameterType="IMarkAsSpamRepository">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="spamProtection" parameterType="ISpamProtection">
                  <dependency />
                </param>
                <param name="spamPostprocessor" parameterType="ISpamPostprocessor">
                  <dependency />
                </param>
                <param name="contentService" parameterType="IContentService">
                  <dependency />
                </param>
                <param name="htmlSanitizer" parameterType="IHtmlSanitizer">
                  <dependency />
                </param>
                <param name="thumbnail" parameterType="IThumbnail">
                  <dependency />
                </param>
                <param name="weightCalculationStrategies" parameterType="StoryWeightCalculators">
                  <dependency />
                </param>
                <param name="voteRepository" parameterType="IVoteRepository">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IBlockedIPCollection" mapTo="BlockedIPCollection">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="fileName" parameterType="System.String">
                  <value type="System.String" value="App_Data/blockedIPList.txt" />
                </param>
                <param name="file" parameterType="IFile">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IFormsAuthentication" mapTo="FormsAuthentication">
            <lifetime type="Singleton" />
          </type>
          <type type="IOpenIdRelyingParty" mapTo="OpenIdRelyingParty">
            <lifetime type="PerWebRequest" />
          </type>
          <type type="reCAPTCHAValidator">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="verifyUrl" parameterType="System.String">
                  <value type="System.String" value="http://api-verify.recaptcha.net/verify" />
                </param>
                <param name="insecureHost" parameterType="System.String">
                  <value type="System.String" value="http://api.recaptcha.net" />
                </param>
                <param name="secureHost" parameterType="System.String">
                  <value type="System.String" value="https://api-secure.recaptcha.net" />
                </param>
                <param name="privateKey" parameterType="System.String">
                  <value type="System.String" value="__recaptcha_private_key__ " />
                </param>
                <param name="publicKey" parameterType="System.String">
                  <value type="System.String" value="__recaptcha_public_key__ " />
                </param>
                <param name="challengeInputName" parameterType="System.String">
                  <value type="System.String" value="recaptcha_challenge_field" />
                </param>
                <param name="responseInputName" parameterType="System.String">
                  <value type="System.String" value="recaptcha_response_field" />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="msdn" type="ISocialServiceRedirector" mapTo="MsdnRedirector">
            <lifetime type="Singleton" />
          </type>
          <type name="delicious" type="ISocialServiceRedirector" mapTo="DeliciousRedirector">
            <lifetime type="Singleton" />
          </type>
          <type name="facebook" type="ISocialServiceRedirector" mapTo="FaceBookRedirector">
            <lifetime type="Singleton" />
          </type>
          <type name="twitter" type="ISocialServiceRedirector" mapTo="TwitterRedirector">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="contentservice" parameterType="IContentService">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="wykop" type="ISocialServiceRedirector" mapTo="WykopRedirector">
            <lifetime type="Singleton" />
          </type>
          <type type="DefaultColors">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="BorderColor" propertyType="System.String">
                <value type="System.String" value="E8E8E8" />
              </property>
              <property name="TextBackColor" propertyType="System.String">
                <value type="System.String" value="ffffff" />
              </property>
              <property name="TextForeColor" propertyType="System.String">
                <value type="System.String" value="414141" />
              </property>
              <property name="CountBackColor" propertyType="System.String">
                <value type="System.String" value="C2E078" />
              </property>
              <property name="CountForeColor" propertyType="System.String">
                <value type="System.String" value="1775B3" />
              </property>
            </typeConfig>
          </type>
          <type type="MembershipController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDomainObjectFactory">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="emailSender" parameterType="IEmailSender">
                  <dependency />
                </param>
                <param name="blockedIPList" parameterType="IBlockedIPCollection">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="FormsAuthentication" propertyType="IFormsAuthentication">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
              <property name="OpenIdRelyingParty" propertyType="IOpenIdRelyingParty">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="StoryController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="categoryRepository" parameterType="ICategoryRepository">
                  <dependency />
                </param>
                <param name="tagRepository" parameterType="ITagRepository">
                  <dependency />
                </param>
                <param name="storyRepository" parameterType="IStoryRepository">
                  <dependency />
                </param>
                <param name="storyService" parameterType="IStoryService">
                  <dependency />
                </param>
                <param name="contentService" parameterType="IContentService">
                  <dependency />
                </param>
                <param name="socialServiceRedirectors" parameterType="SocialServiceRedirectors">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="FormsAuthentication" propertyType="IFormsAuthentication">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
              <property name="CaptchaValidator" propertyType="reCAPTCHAValidator">
                <dependency />
              </property>
              <property name="CounterColors" propertyType="DefaultColors">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="FacebookController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="userRepository" parameterType="IUserRepository">
                  <dependency />
                </param>
                <param name="factory" parameterType="IDomainObjectFactory">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
              </constructor>
              <property name="FormsAuthentication" propertyType="IFormsAuthentication">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="CommentController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="storyRepository" parameterType="IStoryRepository">
                  <dependency />
                </param>
                <param name="storyService" parameterType="IStoryService">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="FormsAuthentication" propertyType="IFormsAuthentication">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
              <property name="CaptchaValidator" propertyType="reCAPTCHAValidator">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="SupportController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="storyRepository" parameterType="IStoryRepository">
                  <dependency />
                </param>
                <param name="emailSender" parameterType="IEmailSender">
                  <dependency />
                </param>
                <param name="upcommingEventsReposiotory" parameterType="ICommingEventRepository">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="FormsAuthentication" propertyType="IFormsAuthentication">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="CategoryController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="categoryRepository" parameterType="ICategoryRepository">
                  <dependency />
                </param>
              </constructor>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="BadgesController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="achievementRepository" parameterType="IAchievementRepository">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="FormsAuthentication" propertyType="IFormsAuthentication">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="TagController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="tagRepository" parameterType="ITagRepository">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="FormsAuthentication" propertyType="IFormsAuthentication">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="FeedController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="configurationManager" parameterType="IConfigurationManager">
                  <dependency />
                </param>
                <param name="categoryRepository" parameterType="ICategoryRepository">
                  <dependency />
                </param>
                <param name="tagRepository" parameterType="ITagRepository">
                  <dependency />
                </param>
                <param name="storyRepository" parameterType="IStoryRepository">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="RecommendationController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDomainObjectFactory">
                  <dependency />
                </param>
                <param name="recommendationRepository" parameterType="IRecommendationRepository">
                  <dependency />
                </param>
                <param name="emailSender" parameterType="IEmailSender">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="CommingEventController">
            <lifetime type="Transient" />
            <!--PerWebRequest-->
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDomainObjectFactory">
                  <dependency />
                </param>
                <param name="commingEventRepository" parameterType="ICommingEventRepository">
                  <dependency />
                </param>
                <param name="aggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
              </constructor>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="AssetHandler">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="Configuration" propertyType="IConfigurationManager">
                <dependency />
              </property>
              <property name="FileReader" propertyType="IFile">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="UserHandler">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="AchievementRepository" propertyType="IAchievementRepository">
                <dependency />
              </property>
              <property name="Colors" propertyType="DefaultColors">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="ImageHandler">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="Width" propertyType="System.Int32">
                <value type="System.Int32" value="99" />
              </property>
              <property name="Height" propertyType="System.Int32">
                <value type="System.Int32" value="27" />
              </property>
              <property name="BorderWidth" propertyType="System.Int32">
                <value type="System.Int32" value="1" />
              </property>
              <property name="FontName" propertyType="System.String">
                <value type="System.String" value="Tahoma" />
              </property>
              <property name="FontSize" propertyType="System.Int32">
                <value type="System.Int32" value="12" />
              </property>
              <property name="NewStoryCacheDurationInMinutes" propertyType="System.Single">
                <value type="System.Single" value="5" />
              </property>
              <!---Cache for 3 Days -->
              <property name="ExpiredStoryCacheDurationInMinutes" propertyType="System.Single">
                <value type="System.Single" value="4320" />
              </property>
              <property name="Colors" propertyType="DefaultColors">
                <dependency />
              </property>
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type type="OpenSearchHandler">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <!---Cache for 1 Year -->
              <property name="CacheDurationInDays" propertyType="System.Single">
                <value type="System.Single" value="14" />
              </property>
              <property name="GenerateETag" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
              <property name="Compress" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
            </typeConfig>
          </type>
          <type type="XrdsHandler">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <!---Cache for 1 Years -->
              <property name="CacheDurationInDays" propertyType="System.Single">
                <value type="System.Single" value="365" />
              </property>
              <property name="GenerateETag" propertyType="System.Boolean">
                <value type="System.Boolean" value="false" />
              </property>
              <property name="Compress" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
            </typeConfig>
          </type>
          <type type="SiteMapHandler">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="Settings" propertyType="IConfigurationSettings">
                <dependency />
              </property>
              <property name="UserRepository" propertyType="IUserRepository">
                <dependency />
              </property>
              <property name="CategoryRepository" propertyType="ICategoryRepository">
                <dependency />
              </property>
              <property name="TagRepository" propertyType="ITagRepository">
                <dependency />
              </property>
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
              <property name="PublishedStoryMaxCount" propertyType="System.Int32">
                <value type="System.Int32" value="100" />
              </property>
              <property name="UpcomingStoryMaxCount" propertyType="System.Int32">
                <value type="System.Int32" value="50" />
              </property>
              <property name="CacheDurationInMinutes" propertyType="System.Single">
                <!---Cache for 6 Hours -->
                <value type="System.Single" value="360" />
              </property>
              <property name="GenerateETag" propertyType="System.Boolean">
                <value type="System.Boolean" value="false" />
              </property>
              <property name="Compress" propertyType="System.Boolean">
                <value type="System.Boolean" value="true" />
              </property>
            </typeConfig>
          </type>
          <type type="ShareHandler">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="StoryRepository" propertyType="IStoryRepository">
                <dependency />
              </property>
            </typeConfig>
          </type>
          <type name="pingStory" type="IBackgroundTask" mapTo="PingStory">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="contentService" parameterType="IContentService">
                  <dependency />
                </param>
                <param name="textFormat" parameterType="System.String">
                  <value type="System.String" value="Dziękujemy za dodanie artykułu - Trackback z {0}" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="pingFeedburner" type="IBackgroundTask" mapTo="PingServer">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="url" parameterType="System.String">
                  <value type="System.String" value="http://ping.feedburner.com" />
                </param>
                <param name="intervalInMinutes" parameterType="System.Single">
                  <value type="System.Single" value="30" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="pingTechnorati" type="IBackgroundTask" mapTo="PingServer">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="url" parameterType="System.String">
                  <value type="System.String" value="http://rpc.technorati.com/rpc/ping" />
                </param>
                <param name="intervalInMinutes" parameterType="System.Single">
                  <value type="System.Single" value="30" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="pingPostRank" type="IBackgroundTask" mapTo="PingServer">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="url" parameterType="System.String">
                  <value type="System.String" value="http://api.postrank.com/v2/ping" />
                </param>
                <param name="intervalInMinutes" parameterType="System.Single">
                  <value type="System.Single" value="30" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="pingPingomatic" type="IBackgroundTask" mapTo="PingServer">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="httpForm" parameterType="IHttpForm">
                  <dependency />
                </param>
                <param name="url" parameterType="System.String">
                  <value type="System.String" value="http://rpc.pingomatic.com" />
                </param>
                <param name="intervalInMinutes" parameterType="System.Single">
                  <value type="System.Single" value="30" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IUserScoreTable" mapTo="UserScoreTable">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="AccountActivated" propertyType="System.Int32">
                <value type="System.Decimal" value="5" />
              </property>
              <property name="StorySubmitted" propertyType="System.Int32">
                <value type="System.Decimal" value="10" />
              </property>
              <property name="StoryViewed" propertyType="System.Int32">
                <value type="System.Decimal" value="0,01" />
              </property>
              <property name="UpcomingStoryPromoted" propertyType="System.Int32">
                <value type="System.Decimal" value="3" />
              </property>
              <property name="PublishedStoryPromoted" propertyType="System.Int32">
                <value type="System.Decimal" value="2" />
              </property>
              <property name="StoryPublished" propertyType="System.Int32">
                <value type="System.Decimal" value="5" />
              </property>
              <property name="StoryCommented" propertyType="System.Int32">
                <value type="System.Decimal" value="1" />
              </property>
              <property name="StoryMarkedAsSpam" propertyType="System.Int32">
                <value type="System.Decimal" value="5" />
              </property>
              <property name="SpamStorySubmitted" propertyType="System.Int32">
                <value type="System.Decimal" value="50" />
              </property>
              <property name="StoryIncorrectlyMarkedAsSpam" propertyType="System.Int32">
                <value type="System.Decimal" value="1" />
              </property>
              <property name="SpamCommentSubmitted" propertyType="System.Int32">
                <value type="System.Decimal" value="20" />
              </property>
            </typeConfig>
          </type>
          <type name="userScore" type="IBackgroundTask" mapTo="UserScoreService">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
                <param name="userScoreTable" parameterType="IUserScoreTable">
                  <dependency />
                </param>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="voteRepository" parameterType="IVoteRepository">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="mail" type="IBackgroundTask" mapTo="SendMail">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="eventAggregator" parameterType="IEventAggregator">
                  <dependency />
                </param>
                <param name="emailSender" parameterType="IEmailSender">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="admin" type="DefaultUser">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="UserName" propertyType="System.String">
                <value type="System.String" value="admin" />
              </property>
              <property name="Password" propertyType="System.String">
                <value type="System.String" value="admin" />
              </property>
              <property name="Email" propertyType="System.String">
                <value type="System.String" value="admin@dotnatomanik.pl" />
              </property>
              <property name="Role" propertyType="Roles">
                <value type="Roles" value="Administrator" />
              </property>
            </typeConfig>
          </type>
          <type name="support" type="DefaultUser">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="UserName" propertyType="System.String">
                <value type="System.String" value="support" />
              </property>
              <property name="Password" propertyType="System.String">
                <value type="System.String" value="support" />
              </property>
              <property name="Email" propertyType="System.String">
                <value type="System.String" value="support@dotnetomaniak.pl" />
              </property>
              <property name="Role" propertyType="Roles">
                <value type="Roles" value="Moderator" />
              </property>
            </typeConfig>
          </type>
          <type name="bee" type="DefaultUser">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <property name="UserName" propertyType="System.String">
                <value type="System.String" value="bee" />
              </property>
              <property name="Password" propertyType="System.String">
                <value type="System.String" value="iambusy" />
              </property>
              <property name="Email" propertyType="System.String">
                <value type="System.String" value="bee@dotnetomaniak.pl" />
              </property>
              <property name="Role" propertyType="Roles">
                <value type="Roles" value="Bot" />
              </property>
            </typeConfig>
          </type>
          <type name="createDefaultUsers" type="IBootstrapperTask" mapTo="CreateDefaultUsers">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDomainObjectFactory">
                  <dependency />
                </param>
                <param name="userRepository" parameterType="IUserRepository">
                  <dependency />
                </param>
                <param name="users" parameterType="DefaultUsers">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="startBackgroundTasks" type="IBootstrapperTask" mapTo="StartBackgroundTasks">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="tasks" parameterType="BackgroundTasks">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="registerRoutes" type="IBootstrapperTask" mapTo="RegisterRoutes">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="settings" parameterType="IConfigurationSettings">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="endRecommendationNotificationJob" type="IBootstrapperTask" mapTo="EndRecommendationNotificationJob">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="emailSender" parameterType="IEmailSender">
                  <dependency />
                </param>
                <param name="intervalToCheckEndingRecommendationInDays" parameterType="System.Int32">
                  <value type="System.Int32" value="5" />
                </param>
                <param name="beginBusinessHours" parameterType="System.Int32">
                  <value type="System.Int32" value="9" />
                </param>
                <param name="finishBusinessHours" parameterType="System.Int32">
                  <value type="System.Int32" value="15" />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IControllerFactory" mapTo="ControllerFactory">
            <lifetime type="Singleton" />
          </type>
          <type name="registerControllerFactory" type="IBootstrapperTask" mapTo="RegisterControllerFactory">
            <lifetime type="Singleton" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="controllerFactory" parameterType="IControllerFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IStoryDataService" mapTo="StoryDataService">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="storyRepository" parameterType="IStoryRepository">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <!-- badges -->
          <type type="IAchievementRepository" mapTo="AchievementRepository">
            <lifetime type="PerWebRequest" />
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency />
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="EarlyBird" type="IBootstrapperTask" mapTo="EarlyBirdBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="NightOwl" type="IBootstrapperTask" mapTo="NightOwlBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="1kPointsBadge" type="IBootstrapperTask" mapTo="1kPointsBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="10kPointsBadge" type="IBootstrapperTask" mapTo="10kPointsBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="StoryAdderBadge" type="IBootstrapperTask" mapTo="StoryAdderBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="CommenterBadge" type="IBootstrapperTask" mapTo="CommenterBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="UpVoterBadge" type="IBootstrapperTask" mapTo="UpVoterBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="GoodStoryBadge" type="IBootstrapperTask" mapTo="GoodStoryBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="GreatStoryBadge" type="IBootstrapperTask" mapTo="GreatStoryBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="PopularStoryBadge" type="IBootstrapperTask" mapTo="PopularStoryBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="MultiAdderBadge" type="IBootstrapperTask" mapTo="MultiAdderBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="GlobetrotterBadge" type="IBootstrapperTask" mapTo="GlobetrotterBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="DotnetomaniakBadge" type="IBootstrapperTask" mapTo="DotnetomaniakBadge">
            <lifetime type="Singleton" />
          </type>
          <type name="FacebookBadge" type="IBootstrapperTask" mapTo="FacebookBadge">
            <lifetime type="Singleton" />
          </type>
        </types>
      </container>
    </containers>
  </unity>
  <assetSettings version="2.9.2.5" cacheDurationInDays="365" generateETag="true">
    <assets>
      <clear />
      <add name="css" contentType="text/css" directory="~/Assets/StyleSheets" files="style.css;marItUp.min.css;colorPicker.min.css;autocomplete.css;modal.css;blog.css;ui.jquery.css" />
      <add name="js1" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="jQuery-1.7.1.min.js;load.js;GloablErrorHandler.min.js;SmoothImage.min.js" />
      <add name="js2" version="2.9.2.6" generateETag="true" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="jquery-ui-1.8.17.custom.min.js;OpenID.js;jquery.form.min.js;jquery.validate.min.js;Membership.js;Utility.js;Search.min.js;Story.js;Analytics.min.js;devMedia.js;SocialMedia.js" />
      <add name="js3" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="showdown.js;jquery.markitup.min.js;colorpicker.min.js;ImageCode.js;RichEditor.min.js;Comment.js" />
      <add name="firstVisit" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="MainPage.min.js;" />
      <add name="faq" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="Faq.js" />
      <add name="contact" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="Contact.js" />
      <add name="moderation" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="Moderation.js" />
      <add name="commingevent" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="CommingEvent.js" />
      <add name="administration" contentType="application/x-javascript" directory="~/Assets/JavaScripts" files="Administration.js" />
    </assets>
  </assetSettings>
  <!-- this is an optional configuration section where aspects of dotnetopenauth can be customized -->
  <dotNetOpenAuth>
    <openid>
      <relyingParty>
        <security requireSsl="false" />
        <behaviors>
          <!-- The following OPTIONAL behavior allows RPs to use SREG only, but be compatible
                 with OPs that use Attribute Exchange (in various formats). -->
          <add type="DotNetOpenAuth.OpenId.Behaviors.AXFetchAsSregTransform, DotNetOpenAuth" />
        </behaviors>
      </relyingParty>
    </openid>
    <messaging>
      <untrustedWebRequest>
        <whitelistHosts>
          <add name="localhost" />
          <add name="dotnetomaniak.pl" />
        </whitelistHosts>
      </untrustedWebRequest>
    </messaging>
  </dotNetOpenAuth>
  <system.net>
    <connectionManagement>
      <add address="*" maxconnection="1000" />
    </connectionManagement>
    <settings>
      <servicePointManager expect100Continue="false" />
    </settings>
  </system.net>
  <!--
    For a description of web.config changes see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.6.2" />
      </system.Web>
  -->
  <system.web>
    <trust level="Full" />
    <authentication mode="Forms">
      <forms name="dotnetomaniakpl_Login" path="/" protection="All" slidingExpiration="true" timeout="525600" />
    </authentication>
    <caching>
      <outputCacheSettings>
        <outputCacheProfiles>
          <clear />
          <!-- 2 Days -->
          <add name="JsonUrlCache" duration="172800" varyByParam="*" />
          <!-- 1 Hour -->
          <add name="JsonTagCache" duration="3600" varyByParam="*" />
          <!-- 5 Minute -->
          <add name="JsonStoryCache" duration="300" varyByParam="*" />
          <!-- half an Hour -->
          <add name="FeedCache" duration="1800" varyByParam="*" />
        </outputCacheProfiles>
      </outputCacheSettings>
    </caching>
    <compilation debug="true" targetFramework="4.6.2">
      <assemblies>
        <add assembly="System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
        <add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Data.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
        <add assembly="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.WebPages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
      </assemblies>
    </compilation>
    <customErrors mode="RemoteOnly" defaultRedirect="~/ErrorPages/Generic.aspx">
      <error statusCode="403" redirect="~/ErrorPages/AccessDenied.aspx" />
      <error statusCode="404" redirect="~/ErrorPages/NotFound.aspx" />
      <error statusCode="503" redirect="~/ErrorPages/Offline.aspx" />
    </customErrors>
    <httpHandlers>
      <add verb="GET,HEAD" path="asset.axd" validate="false" type="Kigg.Web.AssetHandler, Kigg.Web" />
      <add verb="GET,HEAD" path="image.axd" validate="false" type="Kigg.Web.ImageHandler, Kigg.Web" />
      <add verb="GET,HEAD" path="share.axd" validate="false" type="Kigg.Web.ShareHandler, Kigg.Web" />
      <add verb="GET,HEAD" path="user.axd" validate="false" type="Kigg.Web.UserHandler, Kigg.Web" />
      <add verb="GET,HEAD" path="*sitemap.axd" validate="false" type="Kigg.Web.SiteMapHandler, Kigg.Web" />
      <add verb="GET,HEAD" path="opensearch.axd" validate="false" type="Kigg.Web.OpenSearchHandler, Kigg.Web" />
      <add verb="GET,HEAD" path="xrds.axd" validate="false" type="Kigg.Web.XrdsHandler, Kigg.Web" />
      <!--<add
          verb="GET,HEAD"
          path="ChartImg.axd"
          validate="false"
          type="System.Web.UI.DataVisualization.Charting.ChartHttpHandler, System.Web.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
            />-->
      <add verb="*" path="*.mvc" validate="false" type="System.Web.Mvc.MvcHttpHandler, System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
    </httpHandlers>
    <httpModules>
      <remove name="WindowsAuthentication" />
      <remove name="PassportAuthentication" />
      <remove name="UrlAuthorization" />
      <remove name="FileAuthorization" />
      <remove name="AnonymousIdentification" />
      <remove name="Session" />
      <remove name="Profile" />
      <remove name="ServiceModel" />
      <remove name="ErrorHandlerModule" />
      <remove name="RoleManager" />
      <add name="RemoveWwwRedirector" type="Kigg.Web.RemoveWwwRedirector, Kigg.Web" />
      <add name="IPBlock" type="Kigg.Web.IPBlock, Kigg.Web" />
      <add name="ErrorHandler" type="Kigg.Web.ErrorHandler, Kigg.Web" />
      <!--<add name="RemoveWhitespaceModule" type="WebOptimizer.Modules.RemoveWhitespaceModule, WebOptimizer" />-->
      <!--
            <add
                name="Offline"
                type="Kigg.Web.Offline, Kigg.Web"
            />
            -->
      <add name="UnityPerWebRequestLifetimeModule" type="Kigg.Infrastructure.EnterpriseLibrary.UnityPerWebRequestLifetimeModule, Kigg.Infrastructure.EnterpriseLibrary" />
      <add name="ApplicationInsightsWebTracking" type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" />
    </httpModules>
    <globalization requestEncoding="utf-8" responseEncoding="utf-8" culture="pl-PL" uiCulture="pl-PL" />
    <pages enableViewState="false" enableSessionState="false" controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID">
      <namespaces>
        <add namespace="System.Collections.Generic" />
        <add namespace="System.Linq" />
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="Kigg" />
        <add namespace="Kigg.DomainObjects" />
        <add namespace="Kigg.Web" />
        <add namespace="System.Web.Helpers" />
        <add namespace="System.Web.WebPages" />
      </namespaces>
      <controls>
        <!--<add tagPrefix="asp" namespace="System.Web.UI.DataVisualization.Charting" assembly="System.Web.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"/>-->
        <add tagPrefix="kigg" namespace="Kigg.Web" assembly="Kigg.Web" />
      </controls>
    </pages>
    <sessionState mode="Off" />
    <httpRuntime requestValidationMode="2.0" enableVersionHeader="false" />
  </system.web>
  <system.webServer>
    <httpProtocol>
      <customHeaders>
        <remove name="X-Powered-By" />
        <add name="X-XSS-Protection" value="1; mode=block" />
      </customHeaders>
    </httpProtocol>
    <security>
      <!--<ipSecurity allowUnlisted="true">
    </ipSecurity>-->
    </security>
    <rewrite>
      <rules>
        <rule name="wp-login">
          <match url="wp-login.php$" />
          <action type="CustomResponse" statusCode="200" statusReason="Nooooooooo." statusDescription="OMG!!! OMG!!!!" />
        </rule>
        <rule name="Block access from unwanted REMOTE_ADDR">
          <match url=".*" />
          <conditions logicalGrouping="MatchAny">
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.78\.177\b" />
            <add input="{REMOTE_ADDR}" pattern="\b61\.160\.247\.19\b" />
            <add input="{REMOTE_ADDR}" pattern="\b61\.160\.212\.194\b" />
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.78\.184\b" />
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.78\.49\b" />
            <add input="{REMOTE_ADDR}" pattern="\b61\.160\.195\.79\b" />
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.75\.161\b" />
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.75\.148\b" />
            <add input="{REMOTE_ADDR}" pattern="\b61\.160\.213\.53\b" />
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.75\.155\b" />
            <add input="{REMOTE_ADDR}" pattern="\b182\.84\.98\.54\b" />
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.78\.5\b" />
            <add input="{REMOTE_ADDR}" pattern="\b222\.186\.25\.13\b" />
            <add input="{REMOTE_ADDR}" pattern="\b222\.186\.27\.97\b" />
            <add input="{REMOTE_ADDR}" pattern="\b222\.186\.26\.46\b" />
            <add input="{REMOTE_ADDR}" pattern="\b61\.160\.207\.213\b" />
            <add input="{REMOTE_ADDR}" pattern="\b61\.160\.194\.118\b" />
            <add input="{REMOTE_ADDR}" pattern="\b61\.160\.212\.184\b" />
            <add input="{REMOTE_ADDR}" pattern="\b60\.169\.75\.216\b" />
          </conditions>
          <action type="AbortRequest" />
        </rule>
        <rule name="RequestBlockingRule1" patternSyntax="Wildcard" stopProcessing="true">
          <match url="*" />
          <conditions>
            <add input="{HTTP_USER_AGENT}" pattern="SemrushBot|MJ12bot" />
          </conditions>
          <!--<action type="CustomResponse" statusCode="403" statusReason="Forbidden: Access is denied." statusDescription="Get Lost." />-->
          <action type="AbortRequest" />
        </rule>
        <!--rule name="Przekierowanie do HTTPS WWW" stopProcessing="true">
        <match url="(.*)" />
        <conditions logicalGrouping="MatchAny">
          <add input="{HTTP_HOST}" pattern="^dotnetomaniak\.pl$" negate="true" />
          <add input="{HTTPS}" pattern="^OFF$" />
        </conditions>  
        <action type="Redirect" url="https://{HTTP_HOST}/{R:1}" redirectType="Permanent" />
      </rule-->
      </rules>
    </rewrite>
    <handlers>
      <add name="AssetHandler" preCondition="integratedMode" verb="GET,HEAD" path="asset.axd" type="Kigg.Web.AssetHandler, Kigg.Web" />
      <add name="ImageHandler" preCondition="integratedMode" verb="GET,HEAD" path="image.axd" type="Kigg.Web.ImageHandler, Kigg.Web" />
      <add name="ShareHandler" preCondition="integratedMode" verb="GET,HEAD" path="share.axd" type="Kigg.Web.ShareHandler, Kigg.Web" />
      <add name="UserHandler" preCondition="integratedMode" verb="GET,HEAD" path="user.axd" type="Kigg.Web.UserHandler, Kigg.Web" />
      <add name="SiteMapHandler" preCondition="integratedMode" verb="GET,HEAD" path="*sitemap.axd" type="Kigg.Web.SiteMapHandler, Kigg.Web" />
      <add name="OpenSearchHandler" preCondition="integratedMode" verb="GET,HEAD" path="opensearch.axd" type="Kigg.Web.OpenSearchHandler, Kigg.Web" />
      <add name="XrdsHandler" preCondition="integratedMode" verb="GET,HEAD" path="xrds.axd" type="Kigg.Web.XrdsHandler, Kigg.Web" />
      <!--<add
          name="ChartHandler"
          preCondition="integratedMode"
          verb="GET,HEAD"
          path="ChartImg.axd"
          type="System.Web.UI.DataVisualization.Charting.ChartHttpHandler, System.Web.DataVisualization, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
            />-->
      <add name="MvcHttpHandler" preCondition="integratedMode" verb="*" path="*.mvc" type="System.Web.Mvc.MvcHttpHandler, System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
      <add name="UrlRoutingHandler" preCondition="integratedMode" verb="*" path="UrlRouting.axd" type="System.Web.HttpForbiddenHandler, System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers>
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="WindowsAuthentication" />
      <remove name="PassportAuthentication" />
      <remove name="UrlAuthorization" />
      <remove name="FileAuthorization" />
      <remove name="AnonymousIdentification" />
      <remove name="Session" />
      <remove name="Profile" />
      <remove name="ServiceModel" />
      <remove name="ErrorHandlerModule" />
      <remove name="RoleManager" />
      <remove name="RemoveWwwRedirector" />
      <remove name="IPBlock" />
      <remove name="ErrorHandler" />
      <remove name="Offline" />
      <remove name="UnityPerWebRequestLifetimeModule" />
      <add name="RemoveWwwRedirector" type="Kigg.Web.RemoveWwwRedirector, Kigg.Web" />
      <add name="IPBlock" type="Kigg.Web.IPBlock, Kigg.Web" />
      <add name="ErrorHandler" type="Kigg.Web.ErrorHandler, Kigg.Web" />
      <!--<add name="RemoveWhitespaceModule" type="WebOptimizer.Modules.RemoveWhitespaceModule, WebOptimizer" />-->
      <!--
            <add
                name="Offline"
                type="Kigg.Web.Offline, Kigg.Web"
            />
            -->
      <add name="UnityPerWebRequestLifetimeModule" type="Kigg.Infrastructure.EnterpriseLibrary.UnityPerWebRequestLifetimeModule, Kigg.Infrastructure.EnterpriseLibrary" />
      <remove name="ApplicationInsightsWebTracking" />
      <add name="ApplicationInsightsWebTracking" type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" preCondition="managedHandler" />
      <remove name="TelemetryCorrelationHttpModule" />
      <add name="TelemetryCorrelationHttpModule" type="Microsoft.AspNet.TelemetryCorrelation.TelemetryCorrelationHttpModule, Microsoft.AspNet.TelemetryCorrelation" preCondition="integratedMode,managedHandler" />
    </modules>
    <validation validateIntegratedModeConfiguration="false" />
    <directoryBrowse enabled="false" />
    <defaultDocument>
      <files>
        <clear />
        <add value="default.aspx" />
        <add value="index.php" />
        <add value="Default.htm" />
        <add value="Default.asp" />
        <add value="index.htm" />
        <add value="index.html" />
        <add value="iisstart.htm" />
      </files>
    </defaultDocument>
    <httpErrors errorMode="DetailedLocalOnly" existingResponse="Auto" />
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<dependentAssembly>
				<assemblyIdentity name="System.Xml.XPath.XDocument" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Xml.XmlSerializer" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Xml.XDocument" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Xml.ReaderWriter" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.1.0" newVersion="4.1.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.ValueTuple" publicKeyToken="CC7B13FFCD2DDD51" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.2.0" newVersion="4.0.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Threading.Timer" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Threading.Tasks.Parallel" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Threading.Overlapped" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Threading" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Text.RegularExpressions" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.1.0" newVersion="4.1.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Text.Encoding.Extensions" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Text.Encoding" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Security.SecureString" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Security.Principal" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Security.Cryptography.Algorithms" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.3.0.0" newVersion="4.3.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.Serialization.Xml" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.3.0" newVersion="4.1.3.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.Serialization.Primitives" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.Serialization.Json" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.Numerics" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.InteropServices" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.Extensions" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Resources.ResourceManager" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Reflection.Primitives" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Reflection.Extensions" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Reflection" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.ObjectModel" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Net.Sockets" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Net.Requests" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Net.Primitives" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Net.NetworkInformation" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Net.Http" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Linq.Queryable" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Linq.Parallel" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Linq.Expressions" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Linq" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.IO" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.IO.Compression" publicKeyToken="B77A5C561934E089" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Globalization.Extensions" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Globalization" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Dynamic.Runtime" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Diagnostics.Tracing" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Diagnostics.Tools" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Diagnostics.StackTrace" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.1.0.0" newVersion="4.1.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Diagnostics.Debug" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Diagnostics.Contracts" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Data.Common" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.2.0.0" newVersion="4.2.0.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.ComponentModel.EventBasedAsync" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.ComponentModel" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Collections" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Collections.Concurrent" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Runtime.InteropServices.RuntimeInformation" publicKeyToken="B03F5F7F11D50A3A" culture="neutral" />
				<bindingRedirect oldVersion="0.0.0.0-4.0.2.0" newVersion="4.0.2.0" />
			</dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.1.2.0" newVersion="4.1.2.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Threading.Tasks" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.11.0" newVersion="4.0.11.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Diagnostics.Tracing.EventSource" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.1.28.0" newVersion="1.1.28.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.6.0" newVersion="5.2.6.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.AspNet.TelemetryCorrelation" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.0.3.0" newVersion="1.0.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-11.0.0.0" newVersion="11.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Extensions.DependencyInjection.Abstractions" publicKeyToken="adb9793829ddae60" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.1.0.0" newVersion="2.1.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <location path="Assets/Images">
    <system.webServer>
      <staticContent>
        <clientCache cacheControlMode="UseMaxAge" cacheControlMaxAge="365.00:00:00" />
      </staticContent>
    </system.webServer>
  </location>
</configuration>
